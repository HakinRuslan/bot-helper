from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.ext.asyncio import AsyncSession
from .user import UserDAO
from .kbs import *
from .schemas import *
from config import settings
from db.models.models.manager import *
from .form import *

user_router = Router()

@user_router.callback_query(F.data == "cancel")
async def cancel(call: CallbackQuery, state: FSMContext):
    await call.answer('–û—Ç–º–µ–Ω–∞!')
    await call.message.edit_text(
        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=()
    )


@user_router.callback_query(F.data == "rev")
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    uservalues = Usersch(username = message.from_user.username, name = message.from_user.fullname)
    await UserDAO.add(session=session_with_commit, values = uservalues)
    return await message.answer(
        f"{message.from_user.full_name}, –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=extra_serv()
    )


@user_router.message()
async def page_home(message: Message, state: FSMContext):
    if message.from_user.text == "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∫—É–ø–∫–æ–π":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Revinfo.coffee)
    elif message.from_user.text == "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∞":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Revinfo.coffee)
    elif message.from_user.text == "–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(RevRealinfo.coffee)
    else:
        return await message.answer(
            f"–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–µ—â–µ–π, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
    
@user_router.message(Revinfo.coffee)
async def page_home(message: Message, state: FSMContext):
    await state.update_data(type_of_problem = message.text)
    msg = await message.answer(
        f"–•–æ—Ä–æ—à–æ. –û–ø–∏—à–∏, —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.",
    )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(Revinfo.desc)

@user_router.message(RevRealinfo.coffee)
async def page_home(message: Message, state: FSMContext):
    await state.update_data(type_of_problem = message.text)
    msg = await message.answer(
        f"–•–æ—Ä–æ—à–æ. –û–ø–∏—à–∏, —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è.",
        reply_markup = cancel()
    )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(RevRealinfo.desc)
    
@user_router.message()
async def page_home(message: Message, state: FSMContext):
    if message.from_user.text == "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∫—É–ø–∫–æ–π":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Revinfo.coffee)
    elif message.from_user.text == "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∞":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Revinfo.coffee)
    elif message.from_user.text == "–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(RevRealinfo.coffee)
    else:
        return await message.answer(
            f"–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–µ—â–µ–π, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
    

@user_router.message()
async def page_home(message: Message, state: FSMContext):
    if message.from_user.text == "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∫—É–ø–∫–æ–π":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Revinfo.coffee)
    elif message.from_user.text == "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∞":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Revinfo.coffee)
    elif message.from_user.text == "–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await state.update_data(type_of_problem = message.text)
        msg = await message.answer(
            f"–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç –∫–æ—Ñ–µ –∞–≤—Ç–æ–º–∞—Ç, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(RevRealinfo.coffee)
    else:
        return await message.answer(
            f"–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–µ—â–µ–π, –æ —á—å–µ–º —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å!",
            reply_markup=extra_serv()
        )
    

# @user_router.callback_query(F.data == "my_profile")
# async def page_about(call: CallbackQuery, session_without_commit: AsyncSession):
#     await call.answer("–ü—Ä–æ—Ñ–∏–ª—å")
#     user_info = await UserDAO.find_one_or_none(session=session_without_commit, filters=UserBaseInDB(telegram_id=call.from_user.id))
#     # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     purchases = await UserDAO.get_purchased_products(session=session_without_commit, user_id=user_info.id)
#     # total_amount = purchases.get("total_amount", 0)
#     # total_purchases = purchases.get("total_purchases", 0)

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫
#     # if total_purchases == 0:
#     #     await call.message.answer(
#     #         text="üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.</b>\n\n"
#     #              "–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ.",
#     #         reply_markup=main_user_kb(call.from_user.id)
#     if purchases:
#         text = (
#             f"üõç <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
#             f"–ö—É–ø–ª–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: <b>{purchases[0].tariff.name}</b>\n"
#             "–ñ–µ–ª–∞–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Ç–∞—Ä–∏—Ñ–∞?"
#         )
#         await call.message.answer(
#             text=text,
#             reply_markup=purchases_kb()
#         )
#     else:
#         text = (
#             f"üõç <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
#             f"<b>–£ –≤–∞—Å –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–µ –∫—É–ø–ª–µ–Ω —Ç–∞—Ä–∏—Ñ—Ñ.</b>\n"
#             "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Ç–∞—Ä–∏—Ñ."
#         )
#         await call.message.answer(
#             text=text,
#             reply_markup=purchases_kb()
#         )

# @user_router.callback_query(F.data == "purchases")
# async def page_user_purchases(call: CallbackQuery, session_without_commit: AsyncSession):
#     await call.answer("–ú–æ–π —Ç–∞—Ä–∏—Ñ")
#     user_info = await UserDAO.find_one_or_none(session=session_without_commit, filters=UserBaseInDB(telegram_id=call.from_user.id))
#     purchases = await UserDAO.get_purchased_products(session=session_without_commit, user_id=user_info.id)
#     if not purchases:
#         await call.message.edit_text(
#             text=f"üîç <b>–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.</b>\n\n", reply_markup=main_user_kb(call.from_user.id)
#         )
#         return

#     tariff = purchases[0].tariff
#     typetariff = await TypeiftariffsDAO.find_one_or_none(session=session_without_commit, filters=TariffTypeIDModel(id=tariff.type_of_tarrifs_id))
#     tariff_text = (
#         f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {tariff.name}\n\n"
#         f"üí∞ <b>–¶–µ–Ω–∞:</b> {purchases[0].price} $.\n\n"
#         f"üìÇ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{tariff.description}</i>\n\n"
#         f"‚ùó <b>–û–∫–æ–Ω—á–∏—Ç—Å—è –≤:</b>\n<i> –≤ –∫–æ–Ω—Ü–µ {format_date_russian(purchases[0].expires.strftime('%d/%m/%y'))}</i>\n\n"
#     )
#     await call.message.answer(
#             text=tariff_text,
#     )

#     await call.message.answer(
#         text="üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!",
#         reply_markup=main_user_kb(call.from_user.id)
    )